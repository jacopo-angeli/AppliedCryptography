#!/usr/bin/env python3

import time, os, sys
from pyasn1.codec.der import decoder

# $ sudo apt-get install python3-pycryptodome
sys.path = sys.path[1:] # removes current directory from aes.py search path
from Cryptodome.Cipher import AES          # https://pycryptodome.readthedocs.io/en/latest/src/cipher/classic.html#ecb-mode
from Cryptodome.Util.strxor import strxor  # https://pycryptodome.readthedocs.io/en/latest/src/util/util.html#crypto-util-strxor-module
from hashlib import pbkdf2_hmac
import hashlib, hmac # do not use any other imports/libraries

# took x.y hours (please specify here how much time your solution required)

#==== ASN1 encoder start ====
# put your DER encoder functions here

#==== ASN1 encoder end ====


# this function benchmarks how many PBKDF2 iterations
# can be performed in one second on the machine it is executed
def benchmark():

    # measure time for performing 10000 iterations

    # extrapolate to 1 second

    print("[+] Benchmark: %s PBKDF2 iterations in 1 second" % (iter))

    return iter # returns number of iterations that can be performed in 1 second


def encrypt(pfile, cfile):

    # benchmarking

    # asking for a password

    # derieving keys

    # reading plaintext

    # padding plaintext

    # encrypting padded plaintext

    # MAC calculation (iv+ciphertext)

    # constructing DER header

    # writing DER header and ciphertext to file

    pass


def decrypt(cfile, pfile):

    # reading DER header and ciphertext
    f = open(cfile, 'rb')
    contents = f.read()
    asn1, ciphertext = decoder.decode(contents)
    f.close()

    # asking for a password

    # derieving keys

    # reading ciphertext

    # before decryption checking MAC (iv+ciphertext)

    # decrypting ciphertext

    # removing padding and writing plaintext to file

    pass

def usage():
    print("Usage:")
    print("-encrypt <plaintextfile> <ciphertextfile>")
    print("-decrypt <ciphertextfile> <plaintextfile>")
    sys.exit(1)


if len(sys.argv) != 4:
    usage()
elif sys.argv[1] == '-encrypt':
    encrypt(sys.argv[2], sys.argv[3])
elif sys.argv[1] == '-decrypt':
    decrypt(sys.argv[2], sys.argv[3])
else:
    usage()
